0、如何将“2.0 * 3 / 1.5”这种字符串的表达式，让计算机能理解，并计算出结果。这里我们可以采用“逆波兰式算法”来解决这个问题。
1、使用方式，如下
    string tmpExp="1.0+3/2-tan(45)/(1+1)";
    RPN rpn = new RPN();
    if (rpn.Parse(tmpExp))
    {
        Console.WriteLine(rpn.Evaluate());
    }

---------------------------------------------
原文:http://www.cnblogs.com/lxfqlcz/archive/2011/08/02/2124854.html
逆波兰式算法思想
	1、从左至右扫描一中缀表达式。
	2、若读取的是操作数，则判断该操作数的类型，并将该操作数存入操作数堆栈
	3、若读取的是运算符
		(1) 该运算符为左括号"("，则直接存入运算符堆栈。
		(2) 该运算符为右括号")"，则输出运算符堆栈中的运算符到操作数堆栈，直到遇到左括号为止，此时抛弃该左括号。
		(3) 该运算符为非括号运算符：
			(a) 若运算符堆栈栈顶的运算符为左括号，则直接存入运算符堆栈。
			(b) 若比运算符堆栈栈顶的运算符优先级高，则直接存入运算符堆栈。
			(c) 若比运算符堆栈栈顶的运算符优先级低或相等，则输出栈顶运算符到操作数堆栈，直至运算符栈栈顶运算符低于（不包括等于）该运算符优先级,或为左括号，
				并将当前运算符压入运算符堆栈。
	4、当表达式读取完成后运算符堆栈中尚有运算符时，则依序取出运算符到操作数堆栈，直到运算符堆栈为空。